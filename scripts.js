const projects = [{'title': 'Smart Door with Proximity Unlock', 'description': "Uses an ultrasonic sensor to detect someone nearby. The servo opens the door and the LED indicates it's unlocked.", 'components': ['Ultrasonic sensor', 'Servo motor', 'LED'], 'image': 'images/1-project.png', 'code': '#include <Servo.h>\nServo myServo;\nint trig = 9, echo = 10, led = 3;\nvoid setup() {\n  pinMode(trig, OUTPUT);\n  pinMode(echo, INPUT);\n  pinMode(led, OUTPUT);\n  myServo.attach(6);\n}\nvoid loop() {\n  digitalWrite(trig, LOW); delayMicroseconds(2);\n  digitalWrite(trig, HIGH); delayMicroseconds(10);\n  digitalWrite(trig, LOW);\n  int duration = pulseIn(echo, HIGH);\n  int distance = duration / 58;\n  if (distance < 15) {\n    myServo.write(90);\n    digitalWrite(led, HIGH);\n  } else {\n    myServo.write(0);\n    digitalWrite(led, LOW);\n  }\n  delay(500);\n}', 'functionality': 'This can be used in high traffic areas to unlcok doors when it senses someone is close by.When it detects an object within a particular distance it triggers the servo motor to turn thus opening or closing the door'}, {'title': 'Light-Activated Curtain Opener', 'description': 'A light sensor detects sunlight and triggers a servo to open the curtains automatically.', 'components': ['Light sensor', 'Servo motor'], 'image': 'images/2-project.png', 'code': '#include <Servo.h>\nServo curtainServo;\nint ldr = A0;\nvoid setup() {\n  curtainServo.attach(9);\n  pinMode(ldr, INPUT);\n}\nvoid loop() {\n  int light = analogRead(ldr);\n  if (light > 500) {\n    curtainServo.write(90);\n  } else {\n    curtainServo.write(0);\n  }\n  delay(500);\n}', 'functionality': 'The photocel detects changes in light.Using these readings  when the light threshold goes below a particular value,the servo moves automatically to draw the curtains.Once it detects light again it returns to the 0 position thus opening the curtain'},{'title': 'Temperature-Based  air cooler', 'description': 'Controls a air flow into based on temperature readings from a sensor.', 'components': ['Temperature sensor', 'Servo motor', 'LED'], 'image': 'images/4-project.png', 'code': '#include <Servo.h>\nServo fanServo;\nint tempPin = A0;\nvoid setup() {\n  fanServo.attach(9);\n}\nvoid loop() {\n  int temp = analogRead(tempPin);\n  float celsius = temp * 0.488;\n  if (celsius > 28) {\n    fanServo.write(90);\n  } else {\n    fanServo.write(0);\n  }\n  delay(1000);\n}', 'functionality': 'This project detects changes in the temperature of an environment and changes position of the servo to control a latch that determines opening of a hatch that regulates airflow'}, {'title': 'Automatic Pet Feeder', 'description': 'A button press activates a servo that dispenses food.', 'components': ['Button', 'Servo motor'], 'image': 'images/5-project.png', 'code': '#include <Servo.h>\nServo feederServo;\nint button = 2;\nvoid setup() {\n  pinMode(button, INPUT_PULLUP);\n  feederServo.attach(9);\n}\nvoid loop() {\n  if (digitalRead(button) == LOW) {\n    feederServo.write(90);\n    delay(1000);\n    feederServo.write(0);\n  }\n}', 'functionality': 'This project allows dispensation of a pets food as required.The button press moves a servo which dispenses prepared food portions on click'}, {'title': 'Parking Assistant System', 'description': 'LEDs indicate how close an object is to your car using an ultrasonic sensor.', 'components': ['Ultrasonic sensor', 'LEDs'], 'image': 'images/6-project.png', 'code': 'int trig = 9, echo = 10;\nint green = 3, yellow = 4, red = 5;\nvoid setup() {\n  pinMode(trig, OUTPUT);\n  pinMode(echo, INPUT);\n  pinMode(green, OUTPUT);\n  pinMode(yellow, OUTPUT);\n  pinMode(red, OUTPUT);\n}\nvoid loop() {\n  digitalWrite(trig, LOW); delayMicroseconds(2);\n  digitalWrite(trig, HIGH); delayMicroseconds(10);\n  digitalWrite(trig, LOW);\n  int duration = pulseIn(echo, HIGH);\n  int distance = duration / 58;\n  digitalWrite(green, distance > 30);\n  digitalWrite(yellow, distance <= 30 && distance > 15);\n  digitalWrite(red, distance <= 15);\n  delay(200);\n}', 'functionality': 'The device can be attached to the blindspot of your car and be used to give audio and visual warnings when object is in close proximity.The different color cues signal to the driver how close to an object the car is.'}, {'title': 'Light-Level Data Logger', 'description': 'Logs light sensor readings. Pressing a button shows a value with an LED feedback.', 'components': ['Light sensor', 'Button', 'LED'], 'image': 'images/7-project.png', 'code': 'int ldr = A0;\nint button = 2;\nint led = 3;\nvoid setup() {\n  pinMode(button, INPUT_PULLUP);\n  pinMode(led, OUTPUT);\n  Serial.begin(9600);\n}\nvoid loop() {\n  if (digitalRead(button) == LOW) {\n    int light = analogRead(ldr);\n    Serial.println(light);\n    digitalWrite(led, HIGH);\n    delay(500);\n    digitalWrite(led, LOW);\n  }\n}', 'functionality': 'This can be used to measure the light intensity over long durations.This in turn can be used in weather stations to help in meteorological research'}, {'title': 'Smart Mailbox Notifier', 'description': 'A reed switch detects mailbox lid opening and turns on a notification LED.', 'components': ['Reed switch', 'LED'], 'image': 'images/8-project.png', 'code': 'int reed = 2;\nint led = 3;\nvoid setup() {\n  pinMode(reed, INPUT_PULLUP);\n  pinMode(led, OUTPUT);\n}\nvoid loop() {\n  digitalWrite(led, digitalRead(reed) == HIGH);\n}', 'functionality': 'The lid of the mailbox can be a magnet.When the mailbox is closed the reed switch is activated thus showing a complete circuit.When it is opened the switch will be open.This will notify the user that something has been placed in the mailbox.'}, {'title': 'Proximity-Activated Light', 'description': 'Turns on an LED when someone comes close using an ultrasonic sensor.', 'components': ['Ultrasonic sensor', 'LED'], 'image': 'images/9-project.png', 'code': 'int trig = 9, echo = 10;\nint led = 3;\nvoid setup() {\n  pinMode(trig, OUTPUT);\n  pinMode(echo, INPUT);\n  pinMode(led, OUTPUT);\n}\nvoid loop() {\n  digitalWrite(trig, LOW); delayMicroseconds(2);\n  digitalWrite(trig, HIGH); delayMicroseconds(10);\n  digitalWrite(trig, LOW);\n  int distance = pulseIn(echo, HIGH) / 58;\n  digitalWrite(led, distance < 20);\n  delay(200);\n}', 'functionality': 'This project uses the components listed to perform a specific function. Inputs like sensors (e.g., light, temperature, ultrasonic) detect environmental changes. The Arduino reads these values and based on pre-defined thresholds, activates outputs such as LEDs, buzzers, or servo motors. For example, in this project, when the Ultrasonic sensor detects a trigger, it causes LED to respond appropriately.'}, {'title': 'Overheat Warning System', 'description': 'Turns on LED or buzzer if temperature exceeds threshold.', 'components': ['Temperature sensor', 'LED', 'Buzzer'], 'image': 'images/10-project.png', 'code': 'int tempPin = A0;\nint led = 3;\nvoid setup() {\n  pinMode(led, OUTPUT);\n}\nvoid loop() {\n  int reading = analogRead(tempPin);\n  float tempC = reading * 0.488;\n  digitalWrite(led, tempC > 30);\n  delay(1000);\n}', 'functionality': 'This project uses the components listed to perform a specific function. Inputs like sensors (e.g., light, temperature, ultrasonic) detect environmental changes. The Arduino reads these values and based on pre-defined thresholds, activates outputs such as LEDs, buzzers, or servo motors. For example, in this project, when the Temperature sensor detects a trigger, it causes Buzzer to respond appropriately.'}, {'title': 'Bike Anti-Theft Alarm', 'description': 'A reed switch detects motion and triggers an LED or buzzer alarm if tampered.', 'components': ['Reed switch', 'LED', 'Buzzer'], 'image': 'images/3-project.png', 'code': 'int reedSwitch = 2;\nint alarm = 3;\nvoid setup() {\n  pinMode(reedSwitch, INPUT_PULLUP);\n  pinMode(alarm, OUTPUT);\n}\nvoid loop() {\n  if (digitalRead(reedSwitch) == HIGH) {\n    digitalWrite(alarm, HIGH);\n  } else {\n    digitalWrite(alarm, LOW);\n  }\n  delay(100);\n}', 'functionality': 'This project uses the components listed to perform a specific function. Inputs like sensors (e.g., light, temperature, ultrasonic) detect environmental changes. The Arduino reads these values and based on pre-defined thresholds, activates outputs such as LEDs, buzzers, or servo motors. For example, in this project, when the Reed switch detects a trigger, it causes Buzzer to respond appropriately.'}, ];

const container = document.getElementById("cardContainer");
const modal = document.getElementById("modal");
const modalTitle = document.getElementById("modalTitle");
const modalDescription = document.getElementById("modalDescription");
const modalComponents = document.getElementById("modalComponents");
const modalImage = document.getElementById("modalImage");
const modalCode = document.getElementById("modalCode");
const modalFunction = document.getElementById("modalFunction");

projects.forEach((proj, index) => {
  const card = document.createElement("div");
  card.className = "card";
  card.innerHTML = `<h3>${index + 1}. ${proj.title}</h3><p>${proj.description.substring(0, 60)}...</p>`;
  card.onclick = () => showModal(proj);
  container.appendChild(card);
});

function showModal(project) {
  modalTitle.textContent = project.title;
  modalDescription.textContent = project.description;
  modalImage.src = project.image;
  modalComponents.innerHTML = project.components.map(c => `<li>${c}</li>`).join("");
  modalCode.textContent = project.code;
  modalFunction.textContent = project.functionality;
  modal.style.display = "flex";
}

function closeModal() {
  modal.style.display = "none";
}

const toggle = document.getElementById("themeToggle");
if (localStorage.getItem("theme") === "dark") {
  document.body.classList.add("dark");
  toggle.checked = true;
}
toggle.addEventListener("change", () => {
  document.body.classList.toggle("dark");
  localStorage.setItem("theme", document.body.classList.contains("dark") ? "dark" : "light");
});

window.onclick = function(event) {
  if (event.target === modal) closeModal();
};
